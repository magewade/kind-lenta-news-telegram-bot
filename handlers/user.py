from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
import aiohttp
import keyboards.userkb as kb
from aiogram.enums import ChatAction
from keyboards.userkb import cat_keyboard
from database.news_db import (
    get_today_news,
    get_yesterday_news,
    get_news_from_day_before_yesterday_and_older as get_old_news,
    search_news_by_keyword,
)

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
from aiogram.filters import Command

user = Router()


@user.message(CommandStart())
async def start(message: Message):
    image_url = "https://i.imgur.com/ZgCqwJc.jpeg"
    text = """–ü—Ä–∏–≤–µ—Ç! 
–ù–∞–ø–∏—à–∏ –æ —á–µ–º —Ö–æ—á–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—á–∏—Ç–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥
    """

    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )
    await message.answer_photo(
        photo=image_url,
        caption=text,
        message_effect_id="5046509860389126442",
        reply_markup=kb.main,
    )


@user.callback_query(F.data == "today")
async def today(callback: CallbackQuery):
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )
    news = get_today_news()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

    if not news:
        await callback.message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ üòï")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(news)}")

    # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    current_news_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    response_text = (
        f"üìÖ **–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]} \n"  # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_today"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â–µ"

    await callback.message.answer(
        response_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )
    print("–ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@user.callback_query(F.data == "yesterday")
async def yesterday(callback: CallbackQuery):
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )
    news = get_yesterday_news()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏

    if not news:
        await callback.message.answer("–í—á–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ üòï")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")

    # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    current_news_index = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    response_text = (
        f"üìÖ **–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞:**\n\n"
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]} \n"  # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_yesterday"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â–µ"
    await callback.message.answer(
        response_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )


@user.callback_query(F.data == "older")
async def old_news(callback: CallbackQuery):
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )
    news = get_old_news()

    if not news:
        await callback.message.answer("–†–∞–Ω–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å üòï")
        return

    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–Ω–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")
    current_news_index = 0
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item[:6]

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    response_text = (
        f"üìÖ **–ë–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n"
        f"üîπ **[{title}]({url})**\n\n"
        f"{content[:3500]}\n\n"
        f"üóì {formatted_date}"
    )

    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_older"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await callback.message.answer(
        response_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )


@user.callback_query(F.data.startswith("next_news_"))
async def show_next_news(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏ –∏ –¥–µ–Ω—å –∏–∑ callback_data
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )
    parts = callback.data.split("_")
    print(parts)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ parts –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(parts) != 4:
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    current_news_index = int(parts[2])  # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏
    day = parts[3]  # –î–µ–Ω—å (today, yesterday, day_before_yesterday)

    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è
    if day == "today":
        news = get_today_news()  # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    elif day == "yesterday":
        news = get_yesterday_news()  # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞
    elif day == "older":
        news = get_old_news()  # –°—Ç–∞—Ä—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –≤ –∑–∞–ø—Ä–æ—Å–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç–∏
    if current_news_index >= len(news):
        await callback.message.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç üòï")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
    response_text = (
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]} \n"  # –û–≥—Ä–∞–Ω–∏—á–∏–º —Ç–µ–∫—Å—Ç –¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    if current_news_index + 1 < len(news):
        next_button = InlineKeyboardButton(
            text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_{day}"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])  # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ï—â–µ"
    await callback.message.answer(
        response_text,
        parse_mode="Markdown",
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )


@user.callback_query(F.data == "send_cat")
async def send_cat(callback: CallbackQuery):
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )
    url = "https://api.thecatapi.com/v1/images/search"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                image_url = data[0]["url"]  # –î–æ—Å—Ç–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É

                await callback.message.answer_photo(
                    photo=image_url,
                    caption="–í–æ—Ç —Ç–µ–±–µ –∫–æ—Ç–∏–∫ üò∫",
                    reply_markup=cat_keyboard,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                )
            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /today
@user.message(Command("today"))
async def today_command(message: Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /today –ø–æ–ª—É—á–µ–Ω–∞")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )

    # –¢–µ–ø–µ—Ä—å –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ today, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É message
    news = get_today_news()
    if not news:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ üòï")
        return

    current_news_index = 0
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    response_text = (
        f"üìÖ **–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]}\n"
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_today"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await message.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)


@user.message(Command("yesterday"))
async def yesterday_command(message: Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /yesterday –ø–æ–ª—É—á–µ–Ω–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞
    news = get_yesterday_news()
    if not news:
        await message.answer("–í—á–µ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ üòï")
        return

    current_news_index = 0
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    response_text = (
        f"üìÖ **–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞:**\n\n"
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]}\n"
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_yesterday"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await message.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)
    print("–ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –∑–∞ –≤—á–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@user.message(Command("later"))
async def later_command(message: Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /later –ø–æ–ª—É—á–µ–Ω–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–∑–∂–µ
    news = get_old_news()
    if not news:
        await message.answer("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –±—É–¥—É—â–µ–µ –Ω–µ—Ç üòï")
        return

    current_news_index = 0
    news_item = list(news.values())[current_news_index]
    title, url, subtitle, content, date, author = news_item

    formatted_date = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    response_text = (
        f"üìÖ **–ù–æ–≤–æ—Å—Ç–∏ –Ω–∞ –±—É–¥—É—â–µ–µ:**\n\n"
        f"üîπ **[{title}]({url})**\n"
        f"\n"
        f"{content[:3500]}\n"
        f"\n"
        f"   üóì {formatted_date}\n"
    )

    next_button = InlineKeyboardButton(
        text="–ï—â–µ", callback_data=f"next_news_{current_news_index + 1}_older"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await message.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)


@user.message(Command("cat"))
async def cat_command(message: Message):
    print("–ö–æ–º–∞–Ω–¥–∞ /cat –ø–æ–ª—É—á–µ–Ω–∞")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )

    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏–∫–∞
    url = "https://api.thecatapi.com/v1/images/search"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                image_url = data[0]["url"]  # –î–æ—Å—Ç–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ç–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π
                await message.answer_photo(
                    photo=image_url,
                    caption="–í–æ—Ç —Ç–µ–±–µ –∫–æ—Ç–∏–∫ üò∫",
                    reply_markup=cat_keyboard,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                )
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø")


@user.message()
async def search_news(message: Message):
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:", message.text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(
        chat_id=message.from_user.id, action=ChatAction.TYPING
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    query = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.")
        return

    # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ä–∞–∑—É)
    news = search_news_by_keyword(query)

    if not news:
        await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query} üòï")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
    news_item = news[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
    print(news_item)

    formatted_date = datetime.strptime(news_item["date"], "%Y-%m-%d %H:%M:%S").strftime(
        "%d.%m.%Y, %H:%M"
    )

    response_text = (
        f"üîπ **[{news_item['title']}]({news_item['url']})**\n\n"
        f"{news_item['content'][:3500]}\n\n"
        f"üóì {formatted_date}\n\n"
        f"{news_item['similarity']:.2f}% –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å"
    )

    # –ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
    next_button = InlineKeyboardButton(
        text="–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data=f"next_search_news_1_search_{query}_0"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await message.answer(response_text, parse_mode="Markdown", reply_markup=keyboard)


@user.callback_query(F.data.startswith("next_search_news_"))
async def show_next_search_news(callback: CallbackQuery):
    await callback.bot.send_chat_action(
        chat_id=callback.from_user.id, action=ChatAction.TYPING
    )

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback.data.split("_")

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∑–∞–ø—Ä–æ—Å
        current_news_index = int(parts[3])  # –ò–Ω–¥–µ–∫—Å –Ω–æ–≤–æ—Å—Ç–∏
        query = parts[5]  # –ó–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π)
    except (IndexError, ValueError):
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏.")
        return

    # –ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    news = search_news_by_keyword(query, offset=current_news_index)

    if not news:
        await callback.message.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç üòï")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –º–µ–Ω—å—à–µ, —á–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    if current_news_index >= len(news):
        await callback.message.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç üòï")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å
    # –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º current_news_index –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    next_news_item = news[current_news_index]  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞

    formatted_date = datetime.strptime(
        next_news_item["date"], "%Y-%m-%d %H:%M:%S"
    ).strftime("%d.%m.%Y, %H:%M")

    response_text = (
        f"üîπ **[{next_news_item['title']}]({next_news_item['url']})**\n\n"
        f"{next_news_item['content'][:3500]}\n\n"
        f"üóì {formatted_date}\n\n"
        f"{next_news_item['similarity']:.2f}% –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å"
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
    next_button = InlineKeyboardButton(
        text="–ï—â–µ –Ω–æ–≤–æ—Å—Ç–∏",
        callback_data=f"next_search_news_{current_news_index + 1}_search_{query}",
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[next_button]])

    await callback.message.answer(
        response_text, parse_mode="Markdown", reply_markup=keyboard
    )
